import Head from "next/head";

import { Inter } from "@next/font/google";
import styles from "../styles/Home.module.css";

import { useEffect, useState } from "react";
import axios from "axios";
const inter = Inter({ subsets: ["latin"] });

export default function Home() {
	const [nftLoading, setNftLoading] = useState(false);
	const [ownerLoading, setOwnerLoading] = useState(false);
	const [nftsIsLoading, setNftsIsLoading] = useState(false);
	const [contractId, setContractId] = useState<string | null>(null);
	const [tokenId, setTokenId] = useState<string | null>(null);
	const [ownerId, setOwnerId] = useState<string | null>(null);
	async function CheckNft() {
		if (!contractId || !tokenId) {
			window.alert("Please enter Contract ID and Token ID");
			return;
		}
		setNftLoading(true);

		const nftData = await (
			await fetch(`/api/nft/${contractId}/${tokenId}`)
		).json();
		if (nftData.success && nftData.data)
			handleSaveToPC(nftData.data, `${contractId}-${tokenId}`);
		else window.alert("NFT not found");
		setNftLoading(false);
	}
	async function CheckNfts() {
		if (!contractId) {
			window.alert("Please enter Contract ID");
			return;
		}
		setNftsIsLoading(true);
		const nftsData = await (
			await axios.get(`/api/nfts/${contractId}`, { timeout: 1000 * 60 * 5 })
		).data;

		if (nftsData.success) handleSaveToPC(nftsData.data, `${contractId}`);
		else window.alert("Error fetching NFTs");
		setNftsIsLoading(false);
	}

	async function CheckOwner() {
		if (!ownerId) {
			window.alert("Please enter Wallet ID");
			return;
		}
		setOwnerLoading(true);
		const nftsData = await (
			await fetch(`/api/owner/${contractId}/${ownerId}`)
		).json();
		if (nftsData.success)
			handleSaveToPC(nftsData.data, `${contractId}-${ownerId}`);
		else window.alert("Error fetching NFTs");
		setOwnerLoading(false);
	}

	return (
		<>
			<Head>
				<title>Near-tool</title>
				<meta name="description" content="Generated by create next app" />
				<meta name="viewport" content="width=device-width, initial-scale=1" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<main className={styles.main}>
				<div>
					Contract ID :
					<input
						onChange={(e) => setContractId(e.target.value)}
						placeholder="Contract ID"
					/>
				</div>
				<div className="section-container">
					<p>Fetch Single NFT</p>
					<div className="v-box center">
						<input
							onChange={(e) => setTokenId(e.target.value)}
							placeholder="Token ID"
						/>
						<button onClick={CheckNft} type="submit">
							{nftLoading ? "Loading" : "Check"}
						</button>
					</div>
				</div>
				<div className="section-container">
					<p>Fetch All Owners For NFT Contract</p>

					<button onClick={CheckNfts}>
						{nftsIsLoading ? "Loading" : "Check"}
					</button>
				</div>
				<div className="section-container">
					<p>Fetch Owned NFT by Wallet Id</p>
					<input
						onChange={(e) => setOwnerId(e.target.value)}
						placeholder="Wallet ID"
					/>
					<button onClick={CheckOwner}>
						{ownerLoading ? "Loading" : "Check"}
					</button>
				</div>
			</main>
		</>
	);
}
const handleSaveToPC = (jsonData: any, filename: string) => {
	const fileData = JSON.stringify(jsonData);
	const blob = new Blob([fileData], { type: "text/plain" });
	const url = URL.createObjectURL(blob);
	const link = document.createElement("a");
	link.download = `${filename}.json`;
	link.href = url;
	link.click();
};
